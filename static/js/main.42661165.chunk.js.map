{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","length","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","borderTop","background","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.42661165.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;\r\n\r\n//In const Card = (props) => {} (props) is catching the property bascially parameters so we do props.name vice versa to use the value\r\n//we can do const { name, email, id } = props; so we dont have to do {props.name} all the time and instead just do {name} vice versa. Its called destructuring\r\n//or we can also do destructuring and give it to the function as parameters for e.g as done above in the functions","import React from 'react';\r\nimport Card from './Card.js'; //Card component\r\n\r\nconst CardList = ({ robots }) => {\r\n\t// const cardArray = robots.map((user, i) =>{\r\n\t// \treturn (\r\n\t// \t\t<Card \r\n\t// \t\t\tkey={robots[i].id} \r\n\t// \t\t\tid={robots[i].id} \r\n\t// \t\t\tname={robots[i].name} \r\n\t// \t\t\temail={robots[i].email}\r\n\t// \t\t/>\r\n\t// \t);\r\n\t// });\r\n\tif(!robots.length){\r\n\t\treturn <h1>Oh! Thats a robot we haven't unlocked yet.</h1>   \r\n\t}else{\r\n\t\treturn(\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{  // {cardArray}\r\n\t\t\t\t\t\trobots.map((user, i) =>{\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\t\t\tkey={robots[i].id} \r\n\t\t\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t);\t}\r\n\t\r\n}\r\nexport default CardList;\r\n\r\n\r\n//when you do a loop you just have to remember you have to give it a unique key\r\n//because if any of the cards get deleted react wont know which one got deleted and we will have to change the entire dom\r\n//if it has a key it will know which ones deleted and will remove it\r\n//so by giving it a key it basically helps reducing the amount of dom manipulation\r\n//in our case we just give it id since its unique ","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots' onChange={searchChange}/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;\r\n\r\n\r\n// ({ searchChange }) we are using destructuring here, it allows us to grab props objects\r\n// and grab its properties\r\n// onchange=\"myFunction()\" is an html event so in JSX we can do onchange={myFunction()}\r\n//when onchange event is triggered it calls the function its refering to in this case searchChange","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={{overflowY: 'scroll', height: '782px', borderTop: '2px solid rgb(60, 170, 202)', background: 'linear-gradient(to left, rgb(29, 79, 95), rgb(86, 90, 150)100%)'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;\r\n\r\n\r\n// for styling in JSX use this format style={{}}\r\n//in css: overflow-y\r\n//in jsx: overflowY","import React, { Component } from 'react';\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({ hasError: true})\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn this.state.hasError? <h1> OOOPS, Somethings Wrong!!!</h1> : this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList.js';   // ../ refers to leave dir and then continue path given\r\nimport SearchBox from '../components/SearchBox.js'\r\nimport Scroll from '../components/Scroll.js'; //Its just a wrap component means it renders nothing it just wraps Card List to make it scrollable(just scroll card list and not H1 and search bar)\r\nimport ErrorBoundary from '../components/ErrorBoundary.js';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchField: ''\r\n\t\t}\r\n\t}\r\n\r\n\tonSearchChange = (event)=> {\r\n\t\tthis.setState({ searchField: event.target.value });\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')//fetch() is a window function which we use to make rqst to the server\r\n\t\t.then(response => response.json())                 //weird syntax we have to use all the time dont worry about it\r\n\t\t.then(users => this.setState({ robots: users }));\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst { robots, searchField } = this.state;  //did destructring so we dont have to use this.state.blalaala again and again\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t});\r\n\t\t// instead of if else we used ternary operator here\r\n\t\treturn !robots.length ?  // just in case if list is long and takes time to load and here robots.length will return false if its 0 but ! will trun it true and 1st condition will run\r\n\t\t\t<h1 className='tc f1'>LOADING</h1>:\r\n\t\t\t(\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>Robo Friends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={ this.onSearchChange } />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<CardList robots={ filteredRobots }/>\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t;\r\n\t}\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n// robots.name.toLowerCase() because its easy for comparision when lowercased\r\n//includes() is another javaScript feature\r\n//whenever creating own methods in react insted of using this way --- onSearchChange(event){}\r\n// use this onSearchChange = (event) => {}\r\n//when setting a value for state never use this.state.searchField = .....\r\n//use this way   this.setState({ searchField: event.target.value })\r\n\r\n//when the app runs filteredRobots will have all the robots since searchfield is empty\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App.js'\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}